name: Cordova

on:
  release:
    types:
      - published
  workflow_dispatch:

jobs:
  prepare:
    name: "Build the EW project"
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '18'
      
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-
      
      - name: Cache www directory
        uses: actions/cache@v2
        with:
          path: ~/work/Ellas-War/Ellas-War/www
          key: www-${{ runner.GITHUB_RUN_ID }}
      
      - name: Install dependencies
        run: |
          npm install
  
      - name: Build the project
        run: |
          #Build the web version
          npm run build -- --configuration=production
          zip -r web.zip web
          #Prepare for the apps
          npm run build -- --configuration=mobile
          zip -r mobile.zip www

      - name: Upload web zip file to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GH_TOKEN }}
          file: /home/runner/work/Ellas-War/Ellas-War/web.zip
          asset_name: web.zip
          tag: ${{ github.ref }}

      - name: Upload mobile zip file to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GH_TOKEN }}
          file: /home/runner/work/Ellas-War/Ellas-War/mobile.zip
          asset_name: mobile.zip
          tag: ${{ github.ref }}

  #X64 Arch
  package-x64:
    name: "Build x64 packages"
    runs-on: ubuntu-22.04
    needs: prepare

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '18'
      
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-
      
      - name: Cache www directory
        uses: actions/cache@v2
        with:
          path: ~/work/Ellas-War/Ellas-War/www
          key: www-${{ runner.GITHUB_RUN_ID }}
      
      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v1
      
      - name: Install dependencies
        run: |
          sudo apt update -qq
          sudo apt install -y -qq flatpak-builder rpm 
          sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          sudo flatpak install flathub org.freedesktop.Platform/x86_64/20.08 -y
          sudo flatpak install flathub org.freedesktop.Sdk/x86_64/20.08 -y
          sudo flatpak install flathub org.electronjs.Electron2.BaseApp/x86_64/20.08 -y
          npm install -g cordova
      
      - name: Build packages
        run: |
          cordova platform add electron@^3.1.0
          cp res/electron/build-pipeline-linux-x64.json build.json
          cordova build electron --no-telemetry --release
        env:
          GH_TOKEN: '${{ secrets.GH_TOKEN }}'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          image: tonistiigi/binfmt:latest
          platforms: arm64

      - name: Install Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Build snap arm64
        run: |
          docker run --rm -v $WORKSPACE:/ew -v $WORKSPACE/res/electron/build-snap-arm64.json:/ew/build.json  -w /ew --platform linux/arm64/v8 --privileged -t vparanoiaque/cordova-snap sh -c "cordova build electron --no-telemetry"
        env:
          WORKSPACE: '${{ github.workspace }}'

      - name: Publish Snap
        run: |
          FILE=$(ls platforms/electron/build/*.snap)
          for i in $FILE
          do
            snapcraft upload --release=stable $i
          done
        env:
          SNAPCRAFT_STORE_CREDENTIALS: '${{ secrets.SNAPCRAFT_TOKEN }}'
  
  #X86 Arch
  package-x86:
    name: "Build x86 packages"
    runs-on: ubuntu-22.04
    needs: prepare

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '18'
      
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-
      
      - name: Cache www directory
        uses: actions/cache@v2
        with:
          path: ~/work/Ellas-War/Ellas-War/www
          key: www-${{ runner.GITHUB_RUN_ID }}
      
      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v1
        with:
          snapcraft_token: ${{ secrets.snapcraft_token }}
      
      - name: Install dependencies
        run: |
          sudo apt update -qq
          sudo apt install -y -qq rpm 
          npm install -g cordova
      
      - name: Build packages
        run: |
          cordova platform add electron@^3.1.0
          cp res/electron/build-pipeline-linux-x86.json build.json
          cordova build electron --no-telemetry --release
        env:
          GH_TOKEN: '${{ secrets.GH_TOKEN }}'
  
  #arm64 Arch
  package-arm64:
    name: "Build arm64 packages"
    runs-on: ubuntu-22.04
    needs: prepare

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '18'
      
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-
      
      - name: Cache www directory
        uses: actions/cache@v2
        with:
          path: ~/work/Ellas-War/Ellas-War/www
          key: www-${{ runner.GITHUB_RUN_ID }}
      
      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v1
      
      - name: Install dependencies
        run: |
          sudo snap install multipass --edge
          sudo apt update -qq
          sudo apt install -y -qq flatpak-builder rpm 
          sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          sudo flatpak install flathub org.freedesktop.Sdk/aarch64/20.08 -y
          sudo flatpak install flathub org.electronjs.Electron2.BaseApp/aarch64/20.08 -y
          npm install -g cordova
      
      - name: Build packages
        run: |
          cordova platform add electron@^3.1.0
          cp res/electron/build-pipeline-linux-arm64.json build.json
          cordova build electron --no-telemetry --release
        env:
          GH_TOKEN: '${{ secrets.GH_TOKEN }}'

  #armhf Arch
  package-armv7l:
    name: "Build armv7l packages"
    runs-on: ubuntu-22.04
    needs: prepare

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '18'
      
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-
      
      - name: Cache www directory
        uses: actions/cache@v2
        with:
          path: ~/work/Ellas-War/Ellas-War/www
          key: www-${{ runner.GITHUB_RUN_ID }}
      
      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v1
      
      - name: Install dependencies
        run: |
          sudo apt update -qq
          sudo apt install -y -qq rpm 
          npm install -g cordova
      
      - name: Build packages
        run: |
          cordova platform add electron@^3.1.0
          cp res/electron/build-pipeline-linux-armv7l.json build.json
          cordova build electron --no-telemetry --release
        env:
          GH_TOKEN: '${{ secrets.GH_TOKEN }}'
      
      - name: Publish Snap
        run: |
          FILE=$(ls platforms/electron/build/*.snap)
          for i in $FILE
          do
            snapcraft upload --release=stable $i
          done
        env:
          SNAPCRAFT_STORE_CREDENTIALS: '${{ secrets.SNAPCRAFT_TOKEN }}'
  
  #Android
  package-android:
    name: "Build android package"
    runs-on: ubuntu-22.04
    needs: prepare

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
 
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-
      
      - name: Cache www directory
        uses: actions/cache@v2
        with:
          path: ~/work/Ellas-War/Ellas-War/www
          key: www-${{ runner.GITHUB_RUN_ID }}
      
      - name: Install dependencies
        run: |
          npm install -g cordova
 
      - name: Write build-aab.json
        id: aab_json
        uses: timheuer/base64-to-file@v1
        with:
          fileName: 'build-aab.json'
          encodedString: ${{ secrets.ANDROID_AAB_JSON }}
   
      - name: Write build-apk.json
        id: apk_json
        uses: timheuer/base64-to-file@v1
        with:
          fileName: 'build-apk.json'
          encodedString: ${{ secrets.ANDROID_APK_JSON }}
   
      - name: Write keystore
        id: keystore
        uses: timheuer/base64-to-file@v1
        with:
          fileName: 'ew.keystore'
          encodedString: ${{ secrets.ANDROID_BUILD_KEY }}
   
      - name: Build packages
        run: |
          mkdir -p .idea
          cp ${{ env.KEYSTORE }} .idea/ew.keystore
          cordova platform add android@10.0.1
          #Build AAB
          cp ${{ env.AAB_JSON }} build.json
          cordova build android --no-telemetry --release
          #Build APK
          cp ${{ env.APK_JSON }} build.json
          cordova build android --no-telemetry --release
          rm -rf .idea
        env:
          GH_TOKEN: '${{ secrets.GH_TOKEN }}'
          AAB_JSON: ${{ steps.aab_json.outputs.filePath }}
          APK_JSON: ${{ steps.apk_json.outputs.filePath }}
          KEYSTORE: ${{ steps.keystore.outputs.filePath }}
  
      - name: Upload aab file to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GH_TOKEN }}
          file: /home/runner/work/Ellas-War/Ellas-War/platforms/android/app/build/outputs/bundle/release/app-release.aab
          asset_name: app-release.aab
          tag: ${{ github.ref }}
  
      - name: Upload apk file to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GH_TOKEN }}
          file: /home/runner/work/Ellas-War/Ellas-War/platforms/android/app/build/outputs/apk/release/app-release.apk
          asset_name: app-release.apk
          tag: ${{ github.ref }}
  
  #Windows
  package-windows:
    name: "Build windows packages"
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '18'
  
      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: |
          npm install
          npm install -g cordova
  
      - name: Build the project
        run: |
          npm run build -- --configuration=mobile
  
      - name: Write pfx cert
        id: write_pfx
        uses: timheuer/base64-to-file@v1
        with:
          fileName: 'sign_TemporaryKey.pfx'
          encodedString: ${{ secrets.WINDOWS_BUILD_KEY }}
   
      - name: Build packages
        run: |
          cp ${{ env.KEY_PATH }} sign_TemporaryKey.pfx
          cp res/electron/build-pipeline-windows-appx.json build.json
          cordova platform add electron@^3.1.0
          cp -r res/electron/appx platforms/electron/build-res/
          cordova build electron --no-telemetry --release
          cp res/electron/build-pipeline-windows-msi.json build.json
          cordova build electron --no-telemetry --release
          rm sign_TemporaryKey.pfx
        env:
          CSC_KEY_PASSWORD: '${{ secrets.CSC_KEY_PASSWORD }}'
          GH_TOKEN: '${{ secrets.GH_TOKEN }}'
          KEY_PATH: ${{ steps.write_pfx.outputs.filePath }}

  #Mac OS
  package-mac:
    name: "Build Mac package"
    runs-on: macos-11

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '18'
      
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-
      
      - name: Install dependencies
        run: |
          npm install
          npm install -g cordova
  
      - name: Build the project
        run: |
          npm run build -- --configuration=mobile
      
      - name: Build packages
        run: |
          cordova platform add electron@^3.1.0
          cordova build electron --no-telemetry --release
        env:
          GH_TOKEN: '${{ secrets.GH_TOKEN }}'